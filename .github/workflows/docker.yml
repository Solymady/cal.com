name: Build and push image to DockerHub

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_run:
    workflows: ["Update Calendso"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: calcom
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -h 127.0.0.1 -p 5432"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Git submodule update
        run: git submodule update --init

      - name: Log in to the Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Log in to the Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/calendso/calendso
            docker.io/calcom/cal.com
            ghcr.io/calcom/cal.com
          flavor: |
            latest=${{ !github.event.release.prerelease }}

      - name: Copy env
        run: |
          grep -o '^[^#]*' .env.example > .env
          cat .env >> $GITHUB_ENV
          echo "DATABASE_HOST=127.0.0.1:5432" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            nc -zv 127.0.0.1 5432 && echo "PostgreSQL is running!" && exit 0 || echo "Retrying..."
            sleep 2
          done
          echo "PostgreSQL did not start in time"
          exit 1

      - name: Set up database
        run: yarn prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_DIRECT_URL: ${{ secrets.DATABASE_DIRECT_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker Network
        run: docker network create stack || true

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          load: true
          push: false
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/calcom:main
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_DIRECT_URL=${{ secrets.DATABASE_DIRECT_URL }}

      - name: Test runtime
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          IFS=',' read -ra ADDR <<< "$tags"
          tag=${ADDR[0]}

          docker run --rm --network stack \
            -p 3000:3000 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e DATABASE_DIRECT_URL=${{ secrets.DATABASE_DIRECT_URL }} \
            -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            -e CALENDSO_ENCRYPTION_KEY=${{ secrets.CALENDSO_ENCRYPTION_KEY }} \
            $tag &

          server_pid=$!

          echo "Waiting for the server to start..."
          sleep 60

          echo "Checking server health..."
          for i in {1..30}; do
            response=$(curl -o /dev/null -s -w "%{http_code}" ${{ env.NEXT_PUBLIC_WEBAPP_URL }}/auth/login)
            echo "HTTP Status Code: $response"
            if [[ "$response" == "200" ]] || [[ "$response" == "307" ]]; then
              echo "Server is healthy"
              kill $server_pid
              exit 0
            fi
            sleep 2
          done

          echo "Server health check failed"
          kill $server_pid
          exit 1

      - name: Push image
        id: docker_push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/calcom:main
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_DIRECT_URL=${{ secrets.DATABASE_DIRECT_URL }}
        if: ${{ !github.event.release.prerelease }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Cleanup
        run: docker compose down
